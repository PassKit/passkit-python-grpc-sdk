# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from io.common import common_objects_pb2 as io_dot_common_dot_common__objects__pb2
from io.common import filter_pb2 as io_dot_common_dot_filter__pb2
from io.common import reporting_pb2 as io_dot_common_dot_reporting__pb2
from io.event_tickets import event_pb2 as io_dot_event__tickets_dot_event__pb2
from io.event_tickets import production_pb2 as io_dot_event__tickets_dot_production__pb2
from io.event_tickets import ticket_pb2 as io_dot_event__tickets_dot_ticket__pb2
from io.event_tickets import ticket_type_pb2 as io_dot_event__tickets_dot_ticket__type__pb2
from io.event_tickets import venue_pb2 as io_dot_event__tickets_dot_venue__pb2


class EventTicketsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.createProduction = channel.unary_unary(
                '/event_tickets.EventTickets/createProduction',
                request_serializer=io_dot_event__tickets_dot_production__pb2.Production.SerializeToString,
                response_deserializer=io_dot_common_dot_common__objects__pb2.Id.FromString,
                )
        self.patchProduction = channel.unary_unary(
                '/event_tickets.EventTickets/patchProduction',
                request_serializer=io_dot_event__tickets_dot_production__pb2.Production.SerializeToString,
                response_deserializer=io_dot_event__tickets_dot_production__pb2.Production.FromString,
                )
        self.updateProduction = channel.unary_unary(
                '/event_tickets.EventTickets/updateProduction',
                request_serializer=io_dot_event__tickets_dot_production__pb2.Production.SerializeToString,
                response_deserializer=io_dot_event__tickets_dot_production__pb2.Production.FromString,
                )
        self.getProduction = channel.unary_unary(
                '/event_tickets.EventTickets/getProduction',
                request_serializer=io_dot_common_dot_common__objects__pb2.Id.SerializeToString,
                response_deserializer=io_dot_event__tickets_dot_production__pb2.Production.FromString,
                )
        self.deleteProduction = channel.unary_unary(
                '/event_tickets.EventTickets/deleteProduction',
                request_serializer=io_dot_event__tickets_dot_production__pb2.Production.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.listProductions = channel.unary_stream(
                '/event_tickets.EventTickets/listProductions',
                request_serializer=io_dot_common_dot_filter__pb2.Filters.SerializeToString,
                response_deserializer=io_dot_event__tickets_dot_production__pb2.Production.FromString,
                )
        self.getAnalytics = channel.unary_unary(
                '/event_tickets.EventTickets/getAnalytics',
                request_serializer=io_dot_common_dot_reporting__pb2.AnalyticsRequest.SerializeToString,
                response_deserializer=io_dot_event__tickets_dot_production__pb2.ProductionAnalyticsResponse.FromString,
                )
        self.copyProduction = channel.unary_unary(
                '/event_tickets.EventTickets/copyProduction',
                request_serializer=io_dot_event__tickets_dot_production__pb2.ProductionCopyRequest.SerializeToString,
                response_deserializer=io_dot_common_dot_common__objects__pb2.Id.FromString,
                )
        self.createVenue = channel.unary_unary(
                '/event_tickets.EventTickets/createVenue',
                request_serializer=io_dot_event__tickets_dot_venue__pb2.Venue.SerializeToString,
                response_deserializer=io_dot_common_dot_common__objects__pb2.Id.FromString,
                )
        self.updateVenue = channel.unary_unary(
                '/event_tickets.EventTickets/updateVenue',
                request_serializer=io_dot_event__tickets_dot_venue__pb2.Venue.SerializeToString,
                response_deserializer=io_dot_event__tickets_dot_venue__pb2.Venue.FromString,
                )
        self.patchVenue = channel.unary_unary(
                '/event_tickets.EventTickets/patchVenue',
                request_serializer=io_dot_event__tickets_dot_venue__pb2.Venue.SerializeToString,
                response_deserializer=io_dot_event__tickets_dot_venue__pb2.Venue.FromString,
                )
        self.getVenueById = channel.unary_unary(
                '/event_tickets.EventTickets/getVenueById',
                request_serializer=io_dot_common_dot_common__objects__pb2.Id.SerializeToString,
                response_deserializer=io_dot_event__tickets_dot_venue__pb2.Venue.FromString,
                )
        self.deleteVenue = channel.unary_unary(
                '/event_tickets.EventTickets/deleteVenue',
                request_serializer=io_dot_event__tickets_dot_venue__pb2.Venue.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.listVenues = channel.unary_stream(
                '/event_tickets.EventTickets/listVenues',
                request_serializer=io_dot_common_dot_filter__pb2.Filters.SerializeToString,
                response_deserializer=io_dot_event__tickets_dot_venue__pb2.Venue.FromString,
                )
        self.createEvent = channel.unary_unary(
                '/event_tickets.EventTickets/createEvent',
                request_serializer=io_dot_event__tickets_dot_event__pb2.Event.SerializeToString,
                response_deserializer=io_dot_common_dot_common__objects__pb2.Id.FromString,
                )
        self.updateEvent = channel.unary_unary(
                '/event_tickets.EventTickets/updateEvent',
                request_serializer=io_dot_event__tickets_dot_event__pb2.Event.SerializeToString,
                response_deserializer=io_dot_event__tickets_dot_event__pb2.Event.FromString,
                )
        self.patchEvent = channel.unary_unary(
                '/event_tickets.EventTickets/patchEvent',
                request_serializer=io_dot_event__tickets_dot_event__pb2.Event.SerializeToString,
                response_deserializer=io_dot_event__tickets_dot_event__pb2.Event.FromString,
                )
        self.getEventById = channel.unary_unary(
                '/event_tickets.EventTickets/getEventById',
                request_serializer=io_dot_common_dot_common__objects__pb2.Id.SerializeToString,
                response_deserializer=io_dot_event__tickets_dot_event__pb2.Event.FromString,
                )
        self.getEventByStartDateAndVenue = channel.unary_unary(
                '/event_tickets.EventTickets/getEventByStartDateAndVenue',
                request_serializer=io_dot_event__tickets_dot_event__pb2.GetEventRequest.SerializeToString,
                response_deserializer=io_dot_event__tickets_dot_event__pb2.Event.FromString,
                )
        self.deleteEvent = channel.unary_unary(
                '/event_tickets.EventTickets/deleteEvent',
                request_serializer=io_dot_event__tickets_dot_event__pb2.Event.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.listEvents = channel.unary_stream(
                '/event_tickets.EventTickets/listEvents',
                request_serializer=io_dot_event__tickets_dot_event__pb2.EventListRequest.SerializeToString,
                response_deserializer=io_dot_event__tickets_dot_event__pb2.EventListResponse.FromString,
                )
        self.createTicketType = channel.unary_unary(
                '/event_tickets.EventTickets/createTicketType',
                request_serializer=io_dot_event__tickets_dot_ticket__type__pb2.TicketType.SerializeToString,
                response_deserializer=io_dot_common_dot_common__objects__pb2.Id.FromString,
                )
        self.updateTicketType = channel.unary_unary(
                '/event_tickets.EventTickets/updateTicketType',
                request_serializer=io_dot_event__tickets_dot_ticket__type__pb2.TicketType.SerializeToString,
                response_deserializer=io_dot_event__tickets_dot_ticket__type__pb2.TicketType.FromString,
                )
        self.patchTicketType = channel.unary_unary(
                '/event_tickets.EventTickets/patchTicketType',
                request_serializer=io_dot_event__tickets_dot_ticket__type__pb2.TicketType.SerializeToString,
                response_deserializer=io_dot_event__tickets_dot_ticket__type__pb2.TicketType.FromString,
                )
        self.getTicketTypeById = channel.unary_unary(
                '/event_tickets.EventTickets/getTicketTypeById',
                request_serializer=io_dot_common_dot_common__objects__pb2.Id.SerializeToString,
                response_deserializer=io_dot_event__tickets_dot_ticket__type__pb2.TicketType.FromString,
                )
        self.getTicketTypeByUserDefinedId = channel.unary_unary(
                '/event_tickets.EventTickets/getTicketTypeByUserDefinedId',
                request_serializer=io_dot_event__tickets_dot_ticket__type__pb2.GetByUidRequest.SerializeToString,
                response_deserializer=io_dot_event__tickets_dot_ticket__type__pb2.TicketType.FromString,
                )
        self.deleteTicketType = channel.unary_unary(
                '/event_tickets.EventTickets/deleteTicketType',
                request_serializer=io_dot_event__tickets_dot_ticket__type__pb2.TicketType.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.listTicketTypes = channel.unary_stream(
                '/event_tickets.EventTickets/listTicketTypes',
                request_serializer=io_dot_event__tickets_dot_ticket__type__pb2.TicketTypeListRequest.SerializeToString,
                response_deserializer=io_dot_event__tickets_dot_ticket__type__pb2.TicketType.FromString,
                )
        self.issueTicket = channel.unary_unary(
                '/event_tickets.EventTickets/issueTicket',
                request_serializer=io_dot_event__tickets_dot_ticket__pb2.IssueTicketRequest.SerializeToString,
                response_deserializer=io_dot_common_dot_common__objects__pb2.Id.FromString,
                )
        self.issueTicketById = channel.unary_unary(
                '/event_tickets.EventTickets/issueTicketById',
                request_serializer=io_dot_event__tickets_dot_ticket__pb2.Ticket.SerializeToString,
                response_deserializer=io_dot_event__tickets_dot_ticket__pb2.IssueTicketResponseIds.FromString,
                )
        self.updateTicket = channel.unary_unary(
                '/event_tickets.EventTickets/updateTicket',
                request_serializer=io_dot_event__tickets_dot_ticket__pb2.Ticket.SerializeToString,
                response_deserializer=io_dot_common_dot_common__objects__pb2.Id.FromString,
                )
        self.patchPerson = channel.unary_unary(
                '/event_tickets.EventTickets/patchPerson',
                request_serializer=io_dot_event__tickets_dot_ticket__pb2.EventTicketPerson.SerializeToString,
                response_deserializer=io_dot_common_dot_common__objects__pb2.Id.FromString,
                )
        self.validateTicket = channel.unary_unary(
                '/event_tickets.EventTickets/validateTicket',
                request_serializer=io_dot_event__tickets_dot_ticket__pb2.ValidateTicketRequest.SerializeToString,
                response_deserializer=io_dot_event__tickets_dot_ticket__pb2.ValidateTicketResponse.FromString,
                )
        self.redeemTicket = channel.unary_unary(
                '/event_tickets.EventTickets/redeemTicket',
                request_serializer=io_dot_event__tickets_dot_ticket__pb2.RedeemTicketRequest.SerializeToString,
                response_deserializer=io_dot_common_dot_common__objects__pb2.Id.FromString,
                )
        self.redeemTicketsByOrderNumber = channel.unary_unary(
                '/event_tickets.EventTickets/redeemTicketsByOrderNumber',
                request_serializer=io_dot_event__tickets_dot_ticket__pb2.RedeemByOrderNumber.SerializeToString,
                response_deserializer=io_dot_common_dot_common__objects__pb2.Ids.FromString,
                )
        self.getTicketById = channel.unary_unary(
                '/event_tickets.EventTickets/getTicketById',
                request_serializer=io_dot_common_dot_common__objects__pb2.Id.SerializeToString,
                response_deserializer=io_dot_event__tickets_dot_ticket__pb2.Ticket.FromString,
                )
        self.getTicketByTicketNumber = channel.unary_unary(
                '/event_tickets.EventTickets/getTicketByTicketNumber',
                request_serializer=io_dot_event__tickets_dot_ticket__pb2.TicketNumberRequest.SerializeToString,
                response_deserializer=io_dot_event__tickets_dot_ticket__pb2.Ticket.FromString,
                )
        self.getTicketsByOrderNumber = channel.unary_unary(
                '/event_tickets.EventTickets/getTicketsByOrderNumber',
                request_serializer=io_dot_event__tickets_dot_ticket__pb2.OrderNumberRequest.SerializeToString,
                response_deserializer=io_dot_event__tickets_dot_ticket__pb2.Tickets.FromString,
                )
        self.getEventTicketPass = channel.unary_unary(
                '/event_tickets.EventTickets/getEventTicketPass',
                request_serializer=io_dot_event__tickets_dot_ticket__pb2.EventTicketPassRequest.SerializeToString,
                response_deserializer=io_dot_common_dot_common__objects__pb2.PassBundles.FromString,
                )
        self.deleteTicket = channel.unary_unary(
                '/event_tickets.EventTickets/deleteTicket',
                request_serializer=io_dot_event__tickets_dot_ticket__pb2.TicketId.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.deleteTicketsByOrderNumber = channel.unary_unary(
                '/event_tickets.EventTickets/deleteTicketsByOrderNumber',
                request_serializer=io_dot_event__tickets_dot_ticket__pb2.OrderNumberRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.listTickets = channel.unary_stream(
                '/event_tickets.EventTickets/listTickets',
                request_serializer=io_dot_event__tickets_dot_ticket__pb2.TicketListRequest.SerializeToString,
                response_deserializer=io_dot_event__tickets_dot_ticket__pb2.TicketLimitedFields.FromString,
                )
        self.countTickets = channel.unary_unary(
                '/event_tickets.EventTickets/countTickets',
                request_serializer=io_dot_event__tickets_dot_ticket__pb2.TicketListRequest.SerializeToString,
                response_deserializer=io_dot_common_dot_common__objects__pb2.Count.FromString,
                )


class EventTicketsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def createProduction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def patchProduction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateProduction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getProduction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteProduction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listProductions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAnalytics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def copyProduction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createVenue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateVenue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def patchVenue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getVenueById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteVenue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listVenues(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def patchEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getEventById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getEventByStartDateAndVenue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createTicketType(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateTicketType(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def patchTicketType(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTicketTypeById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTicketTypeByUserDefinedId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteTicketType(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listTicketTypes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def issueTicket(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def issueTicketById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateTicket(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def patchPerson(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def validateTicket(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def redeemTicket(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def redeemTicketsByOrderNumber(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTicketById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTicketByTicketNumber(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTicketsByOrderNumber(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getEventTicketPass(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteTicket(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteTicketsByOrderNumber(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listTickets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def countTickets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EventTicketsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'createProduction': grpc.unary_unary_rpc_method_handler(
                    servicer.createProduction,
                    request_deserializer=io_dot_event__tickets_dot_production__pb2.Production.FromString,
                    response_serializer=io_dot_common_dot_common__objects__pb2.Id.SerializeToString,
            ),
            'patchProduction': grpc.unary_unary_rpc_method_handler(
                    servicer.patchProduction,
                    request_deserializer=io_dot_event__tickets_dot_production__pb2.Production.FromString,
                    response_serializer=io_dot_event__tickets_dot_production__pb2.Production.SerializeToString,
            ),
            'updateProduction': grpc.unary_unary_rpc_method_handler(
                    servicer.updateProduction,
                    request_deserializer=io_dot_event__tickets_dot_production__pb2.Production.FromString,
                    response_serializer=io_dot_event__tickets_dot_production__pb2.Production.SerializeToString,
            ),
            'getProduction': grpc.unary_unary_rpc_method_handler(
                    servicer.getProduction,
                    request_deserializer=io_dot_common_dot_common__objects__pb2.Id.FromString,
                    response_serializer=io_dot_event__tickets_dot_production__pb2.Production.SerializeToString,
            ),
            'deleteProduction': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteProduction,
                    request_deserializer=io_dot_event__tickets_dot_production__pb2.Production.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'listProductions': grpc.unary_stream_rpc_method_handler(
                    servicer.listProductions,
                    request_deserializer=io_dot_common_dot_filter__pb2.Filters.FromString,
                    response_serializer=io_dot_event__tickets_dot_production__pb2.Production.SerializeToString,
            ),
            'getAnalytics': grpc.unary_unary_rpc_method_handler(
                    servicer.getAnalytics,
                    request_deserializer=io_dot_common_dot_reporting__pb2.AnalyticsRequest.FromString,
                    response_serializer=io_dot_event__tickets_dot_production__pb2.ProductionAnalyticsResponse.SerializeToString,
            ),
            'copyProduction': grpc.unary_unary_rpc_method_handler(
                    servicer.copyProduction,
                    request_deserializer=io_dot_event__tickets_dot_production__pb2.ProductionCopyRequest.FromString,
                    response_serializer=io_dot_common_dot_common__objects__pb2.Id.SerializeToString,
            ),
            'createVenue': grpc.unary_unary_rpc_method_handler(
                    servicer.createVenue,
                    request_deserializer=io_dot_event__tickets_dot_venue__pb2.Venue.FromString,
                    response_serializer=io_dot_common_dot_common__objects__pb2.Id.SerializeToString,
            ),
            'updateVenue': grpc.unary_unary_rpc_method_handler(
                    servicer.updateVenue,
                    request_deserializer=io_dot_event__tickets_dot_venue__pb2.Venue.FromString,
                    response_serializer=io_dot_event__tickets_dot_venue__pb2.Venue.SerializeToString,
            ),
            'patchVenue': grpc.unary_unary_rpc_method_handler(
                    servicer.patchVenue,
                    request_deserializer=io_dot_event__tickets_dot_venue__pb2.Venue.FromString,
                    response_serializer=io_dot_event__tickets_dot_venue__pb2.Venue.SerializeToString,
            ),
            'getVenueById': grpc.unary_unary_rpc_method_handler(
                    servicer.getVenueById,
                    request_deserializer=io_dot_common_dot_common__objects__pb2.Id.FromString,
                    response_serializer=io_dot_event__tickets_dot_venue__pb2.Venue.SerializeToString,
            ),
            'deleteVenue': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteVenue,
                    request_deserializer=io_dot_event__tickets_dot_venue__pb2.Venue.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'listVenues': grpc.unary_stream_rpc_method_handler(
                    servicer.listVenues,
                    request_deserializer=io_dot_common_dot_filter__pb2.Filters.FromString,
                    response_serializer=io_dot_event__tickets_dot_venue__pb2.Venue.SerializeToString,
            ),
            'createEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.createEvent,
                    request_deserializer=io_dot_event__tickets_dot_event__pb2.Event.FromString,
                    response_serializer=io_dot_common_dot_common__objects__pb2.Id.SerializeToString,
            ),
            'updateEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.updateEvent,
                    request_deserializer=io_dot_event__tickets_dot_event__pb2.Event.FromString,
                    response_serializer=io_dot_event__tickets_dot_event__pb2.Event.SerializeToString,
            ),
            'patchEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.patchEvent,
                    request_deserializer=io_dot_event__tickets_dot_event__pb2.Event.FromString,
                    response_serializer=io_dot_event__tickets_dot_event__pb2.Event.SerializeToString,
            ),
            'getEventById': grpc.unary_unary_rpc_method_handler(
                    servicer.getEventById,
                    request_deserializer=io_dot_common_dot_common__objects__pb2.Id.FromString,
                    response_serializer=io_dot_event__tickets_dot_event__pb2.Event.SerializeToString,
            ),
            'getEventByStartDateAndVenue': grpc.unary_unary_rpc_method_handler(
                    servicer.getEventByStartDateAndVenue,
                    request_deserializer=io_dot_event__tickets_dot_event__pb2.GetEventRequest.FromString,
                    response_serializer=io_dot_event__tickets_dot_event__pb2.Event.SerializeToString,
            ),
            'deleteEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteEvent,
                    request_deserializer=io_dot_event__tickets_dot_event__pb2.Event.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'listEvents': grpc.unary_stream_rpc_method_handler(
                    servicer.listEvents,
                    request_deserializer=io_dot_event__tickets_dot_event__pb2.EventListRequest.FromString,
                    response_serializer=io_dot_event__tickets_dot_event__pb2.EventListResponse.SerializeToString,
            ),
            'createTicketType': grpc.unary_unary_rpc_method_handler(
                    servicer.createTicketType,
                    request_deserializer=io_dot_event__tickets_dot_ticket__type__pb2.TicketType.FromString,
                    response_serializer=io_dot_common_dot_common__objects__pb2.Id.SerializeToString,
            ),
            'updateTicketType': grpc.unary_unary_rpc_method_handler(
                    servicer.updateTicketType,
                    request_deserializer=io_dot_event__tickets_dot_ticket__type__pb2.TicketType.FromString,
                    response_serializer=io_dot_event__tickets_dot_ticket__type__pb2.TicketType.SerializeToString,
            ),
            'patchTicketType': grpc.unary_unary_rpc_method_handler(
                    servicer.patchTicketType,
                    request_deserializer=io_dot_event__tickets_dot_ticket__type__pb2.TicketType.FromString,
                    response_serializer=io_dot_event__tickets_dot_ticket__type__pb2.TicketType.SerializeToString,
            ),
            'getTicketTypeById': grpc.unary_unary_rpc_method_handler(
                    servicer.getTicketTypeById,
                    request_deserializer=io_dot_common_dot_common__objects__pb2.Id.FromString,
                    response_serializer=io_dot_event__tickets_dot_ticket__type__pb2.TicketType.SerializeToString,
            ),
            'getTicketTypeByUserDefinedId': grpc.unary_unary_rpc_method_handler(
                    servicer.getTicketTypeByUserDefinedId,
                    request_deserializer=io_dot_event__tickets_dot_ticket__type__pb2.GetByUidRequest.FromString,
                    response_serializer=io_dot_event__tickets_dot_ticket__type__pb2.TicketType.SerializeToString,
            ),
            'deleteTicketType': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteTicketType,
                    request_deserializer=io_dot_event__tickets_dot_ticket__type__pb2.TicketType.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'listTicketTypes': grpc.unary_stream_rpc_method_handler(
                    servicer.listTicketTypes,
                    request_deserializer=io_dot_event__tickets_dot_ticket__type__pb2.TicketTypeListRequest.FromString,
                    response_serializer=io_dot_event__tickets_dot_ticket__type__pb2.TicketType.SerializeToString,
            ),
            'issueTicket': grpc.unary_unary_rpc_method_handler(
                    servicer.issueTicket,
                    request_deserializer=io_dot_event__tickets_dot_ticket__pb2.IssueTicketRequest.FromString,
                    response_serializer=io_dot_common_dot_common__objects__pb2.Id.SerializeToString,
            ),
            'issueTicketById': grpc.unary_unary_rpc_method_handler(
                    servicer.issueTicketById,
                    request_deserializer=io_dot_event__tickets_dot_ticket__pb2.Ticket.FromString,
                    response_serializer=io_dot_event__tickets_dot_ticket__pb2.IssueTicketResponseIds.SerializeToString,
            ),
            'updateTicket': grpc.unary_unary_rpc_method_handler(
                    servicer.updateTicket,
                    request_deserializer=io_dot_event__tickets_dot_ticket__pb2.Ticket.FromString,
                    response_serializer=io_dot_common_dot_common__objects__pb2.Id.SerializeToString,
            ),
            'patchPerson': grpc.unary_unary_rpc_method_handler(
                    servicer.patchPerson,
                    request_deserializer=io_dot_event__tickets_dot_ticket__pb2.EventTicketPerson.FromString,
                    response_serializer=io_dot_common_dot_common__objects__pb2.Id.SerializeToString,
            ),
            'validateTicket': grpc.unary_unary_rpc_method_handler(
                    servicer.validateTicket,
                    request_deserializer=io_dot_event__tickets_dot_ticket__pb2.ValidateTicketRequest.FromString,
                    response_serializer=io_dot_event__tickets_dot_ticket__pb2.ValidateTicketResponse.SerializeToString,
            ),
            'redeemTicket': grpc.unary_unary_rpc_method_handler(
                    servicer.redeemTicket,
                    request_deserializer=io_dot_event__tickets_dot_ticket__pb2.RedeemTicketRequest.FromString,
                    response_serializer=io_dot_common_dot_common__objects__pb2.Id.SerializeToString,
            ),
            'redeemTicketsByOrderNumber': grpc.unary_unary_rpc_method_handler(
                    servicer.redeemTicketsByOrderNumber,
                    request_deserializer=io_dot_event__tickets_dot_ticket__pb2.RedeemByOrderNumber.FromString,
                    response_serializer=io_dot_common_dot_common__objects__pb2.Ids.SerializeToString,
            ),
            'getTicketById': grpc.unary_unary_rpc_method_handler(
                    servicer.getTicketById,
                    request_deserializer=io_dot_common_dot_common__objects__pb2.Id.FromString,
                    response_serializer=io_dot_event__tickets_dot_ticket__pb2.Ticket.SerializeToString,
            ),
            'getTicketByTicketNumber': grpc.unary_unary_rpc_method_handler(
                    servicer.getTicketByTicketNumber,
                    request_deserializer=io_dot_event__tickets_dot_ticket__pb2.TicketNumberRequest.FromString,
                    response_serializer=io_dot_event__tickets_dot_ticket__pb2.Ticket.SerializeToString,
            ),
            'getTicketsByOrderNumber': grpc.unary_unary_rpc_method_handler(
                    servicer.getTicketsByOrderNumber,
                    request_deserializer=io_dot_event__tickets_dot_ticket__pb2.OrderNumberRequest.FromString,
                    response_serializer=io_dot_event__tickets_dot_ticket__pb2.Tickets.SerializeToString,
            ),
            'getEventTicketPass': grpc.unary_unary_rpc_method_handler(
                    servicer.getEventTicketPass,
                    request_deserializer=io_dot_event__tickets_dot_ticket__pb2.EventTicketPassRequest.FromString,
                    response_serializer=io_dot_common_dot_common__objects__pb2.PassBundles.SerializeToString,
            ),
            'deleteTicket': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteTicket,
                    request_deserializer=io_dot_event__tickets_dot_ticket__pb2.TicketId.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'deleteTicketsByOrderNumber': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteTicketsByOrderNumber,
                    request_deserializer=io_dot_event__tickets_dot_ticket__pb2.OrderNumberRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'listTickets': grpc.unary_stream_rpc_method_handler(
                    servicer.listTickets,
                    request_deserializer=io_dot_event__tickets_dot_ticket__pb2.TicketListRequest.FromString,
                    response_serializer=io_dot_event__tickets_dot_ticket__pb2.TicketLimitedFields.SerializeToString,
            ),
            'countTickets': grpc.unary_unary_rpc_method_handler(
                    servicer.countTickets,
                    request_deserializer=io_dot_event__tickets_dot_ticket__pb2.TicketListRequest.FromString,
                    response_serializer=io_dot_common_dot_common__objects__pb2.Count.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'event_tickets.EventTickets', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EventTickets(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def createProduction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_tickets.EventTickets/createProduction',
            io_dot_event__tickets_dot_production__pb2.Production.SerializeToString,
            io_dot_common_dot_common__objects__pb2.Id.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def patchProduction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_tickets.EventTickets/patchProduction',
            io_dot_event__tickets_dot_production__pb2.Production.SerializeToString,
            io_dot_event__tickets_dot_production__pb2.Production.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateProduction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_tickets.EventTickets/updateProduction',
            io_dot_event__tickets_dot_production__pb2.Production.SerializeToString,
            io_dot_event__tickets_dot_production__pb2.Production.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getProduction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_tickets.EventTickets/getProduction',
            io_dot_common_dot_common__objects__pb2.Id.SerializeToString,
            io_dot_event__tickets_dot_production__pb2.Production.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteProduction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_tickets.EventTickets/deleteProduction',
            io_dot_event__tickets_dot_production__pb2.Production.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listProductions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/event_tickets.EventTickets/listProductions',
            io_dot_common_dot_filter__pb2.Filters.SerializeToString,
            io_dot_event__tickets_dot_production__pb2.Production.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getAnalytics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_tickets.EventTickets/getAnalytics',
            io_dot_common_dot_reporting__pb2.AnalyticsRequest.SerializeToString,
            io_dot_event__tickets_dot_production__pb2.ProductionAnalyticsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def copyProduction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_tickets.EventTickets/copyProduction',
            io_dot_event__tickets_dot_production__pb2.ProductionCopyRequest.SerializeToString,
            io_dot_common_dot_common__objects__pb2.Id.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def createVenue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_tickets.EventTickets/createVenue',
            io_dot_event__tickets_dot_venue__pb2.Venue.SerializeToString,
            io_dot_common_dot_common__objects__pb2.Id.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateVenue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_tickets.EventTickets/updateVenue',
            io_dot_event__tickets_dot_venue__pb2.Venue.SerializeToString,
            io_dot_event__tickets_dot_venue__pb2.Venue.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def patchVenue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_tickets.EventTickets/patchVenue',
            io_dot_event__tickets_dot_venue__pb2.Venue.SerializeToString,
            io_dot_event__tickets_dot_venue__pb2.Venue.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getVenueById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_tickets.EventTickets/getVenueById',
            io_dot_common_dot_common__objects__pb2.Id.SerializeToString,
            io_dot_event__tickets_dot_venue__pb2.Venue.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteVenue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_tickets.EventTickets/deleteVenue',
            io_dot_event__tickets_dot_venue__pb2.Venue.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listVenues(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/event_tickets.EventTickets/listVenues',
            io_dot_common_dot_filter__pb2.Filters.SerializeToString,
            io_dot_event__tickets_dot_venue__pb2.Venue.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def createEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_tickets.EventTickets/createEvent',
            io_dot_event__tickets_dot_event__pb2.Event.SerializeToString,
            io_dot_common_dot_common__objects__pb2.Id.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_tickets.EventTickets/updateEvent',
            io_dot_event__tickets_dot_event__pb2.Event.SerializeToString,
            io_dot_event__tickets_dot_event__pb2.Event.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def patchEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_tickets.EventTickets/patchEvent',
            io_dot_event__tickets_dot_event__pb2.Event.SerializeToString,
            io_dot_event__tickets_dot_event__pb2.Event.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getEventById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_tickets.EventTickets/getEventById',
            io_dot_common_dot_common__objects__pb2.Id.SerializeToString,
            io_dot_event__tickets_dot_event__pb2.Event.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getEventByStartDateAndVenue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_tickets.EventTickets/getEventByStartDateAndVenue',
            io_dot_event__tickets_dot_event__pb2.GetEventRequest.SerializeToString,
            io_dot_event__tickets_dot_event__pb2.Event.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_tickets.EventTickets/deleteEvent',
            io_dot_event__tickets_dot_event__pb2.Event.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/event_tickets.EventTickets/listEvents',
            io_dot_event__tickets_dot_event__pb2.EventListRequest.SerializeToString,
            io_dot_event__tickets_dot_event__pb2.EventListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def createTicketType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_tickets.EventTickets/createTicketType',
            io_dot_event__tickets_dot_ticket__type__pb2.TicketType.SerializeToString,
            io_dot_common_dot_common__objects__pb2.Id.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateTicketType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_tickets.EventTickets/updateTicketType',
            io_dot_event__tickets_dot_ticket__type__pb2.TicketType.SerializeToString,
            io_dot_event__tickets_dot_ticket__type__pb2.TicketType.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def patchTicketType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_tickets.EventTickets/patchTicketType',
            io_dot_event__tickets_dot_ticket__type__pb2.TicketType.SerializeToString,
            io_dot_event__tickets_dot_ticket__type__pb2.TicketType.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getTicketTypeById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_tickets.EventTickets/getTicketTypeById',
            io_dot_common_dot_common__objects__pb2.Id.SerializeToString,
            io_dot_event__tickets_dot_ticket__type__pb2.TicketType.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getTicketTypeByUserDefinedId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_tickets.EventTickets/getTicketTypeByUserDefinedId',
            io_dot_event__tickets_dot_ticket__type__pb2.GetByUidRequest.SerializeToString,
            io_dot_event__tickets_dot_ticket__type__pb2.TicketType.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteTicketType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_tickets.EventTickets/deleteTicketType',
            io_dot_event__tickets_dot_ticket__type__pb2.TicketType.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listTicketTypes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/event_tickets.EventTickets/listTicketTypes',
            io_dot_event__tickets_dot_ticket__type__pb2.TicketTypeListRequest.SerializeToString,
            io_dot_event__tickets_dot_ticket__type__pb2.TicketType.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def issueTicket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_tickets.EventTickets/issueTicket',
            io_dot_event__tickets_dot_ticket__pb2.IssueTicketRequest.SerializeToString,
            io_dot_common_dot_common__objects__pb2.Id.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def issueTicketById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_tickets.EventTickets/issueTicketById',
            io_dot_event__tickets_dot_ticket__pb2.Ticket.SerializeToString,
            io_dot_event__tickets_dot_ticket__pb2.IssueTicketResponseIds.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateTicket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_tickets.EventTickets/updateTicket',
            io_dot_event__tickets_dot_ticket__pb2.Ticket.SerializeToString,
            io_dot_common_dot_common__objects__pb2.Id.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def patchPerson(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_tickets.EventTickets/patchPerson',
            io_dot_event__tickets_dot_ticket__pb2.EventTicketPerson.SerializeToString,
            io_dot_common_dot_common__objects__pb2.Id.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def validateTicket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_tickets.EventTickets/validateTicket',
            io_dot_event__tickets_dot_ticket__pb2.ValidateTicketRequest.SerializeToString,
            io_dot_event__tickets_dot_ticket__pb2.ValidateTicketResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def redeemTicket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_tickets.EventTickets/redeemTicket',
            io_dot_event__tickets_dot_ticket__pb2.RedeemTicketRequest.SerializeToString,
            io_dot_common_dot_common__objects__pb2.Id.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def redeemTicketsByOrderNumber(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_tickets.EventTickets/redeemTicketsByOrderNumber',
            io_dot_event__tickets_dot_ticket__pb2.RedeemByOrderNumber.SerializeToString,
            io_dot_common_dot_common__objects__pb2.Ids.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getTicketById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_tickets.EventTickets/getTicketById',
            io_dot_common_dot_common__objects__pb2.Id.SerializeToString,
            io_dot_event__tickets_dot_ticket__pb2.Ticket.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getTicketByTicketNumber(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_tickets.EventTickets/getTicketByTicketNumber',
            io_dot_event__tickets_dot_ticket__pb2.TicketNumberRequest.SerializeToString,
            io_dot_event__tickets_dot_ticket__pb2.Ticket.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getTicketsByOrderNumber(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_tickets.EventTickets/getTicketsByOrderNumber',
            io_dot_event__tickets_dot_ticket__pb2.OrderNumberRequest.SerializeToString,
            io_dot_event__tickets_dot_ticket__pb2.Tickets.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getEventTicketPass(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_tickets.EventTickets/getEventTicketPass',
            io_dot_event__tickets_dot_ticket__pb2.EventTicketPassRequest.SerializeToString,
            io_dot_common_dot_common__objects__pb2.PassBundles.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteTicket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_tickets.EventTickets/deleteTicket',
            io_dot_event__tickets_dot_ticket__pb2.TicketId.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteTicketsByOrderNumber(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_tickets.EventTickets/deleteTicketsByOrderNumber',
            io_dot_event__tickets_dot_ticket__pb2.OrderNumberRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listTickets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/event_tickets.EventTickets/listTickets',
            io_dot_event__tickets_dot_ticket__pb2.TicketListRequest.SerializeToString,
            io_dot_event__tickets_dot_ticket__pb2.TicketLimitedFields.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def countTickets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/event_tickets.EventTickets/countTickets',
            io_dot_event__tickets_dot_ticket__pb2.TicketListRequest.SerializeToString,
            io_dot_common_dot_common__objects__pb2.Count.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
