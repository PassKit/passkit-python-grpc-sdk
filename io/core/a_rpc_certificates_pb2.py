# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: io/core/a_rpc_certificates.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import builder as _builder
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.api import annotations_pb2 as google_dot_api_dot_annotations__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from io.common import common_objects_pb2 as io_dot_common_dot_common__objects__pb2
from io.certificate import certificate_pb2 as io_dot_certificate_dot_certificate__pb2
from io.common import pagination_pb2 as io_dot_common_dot_pagination__pb2
from io.common import filter_pb2 as io_dot_common_dot_filter__pb2
from protoc_gen_openapiv2.options import annotations_pb2 as protoc__gen__openapiv2_dot_options_dot_annotations__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n io/core/a_rpc_certificates.proto\x12\x02io\x1a\x1cgoogle/api/annotations.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a\x1eio/common/common_objects.proto\x1a io/certificate/certificate.proto\x1a\x1aio/common/pagination.proto\x1a\x16io/common/filter.proto\x1a.protoc-gen-openapiv2/options/annotations.proto2\xe8\x0e\n\x0c\x43\x65rtificates\x12\xdc\x01\n\x17getAppleCertificateData\x12\x16.io.PassTypeIdentifier\x1a\x13.io.CertificateData\"\x93\x01\x82\xd3\xe4\x93\x02\x1b\x12\x19/certificate/{passTypeId}\x92\x41o\x12\x1aGet Apple pass certificate\x1aQGets the certificate data for certificate with Pass Type Identifier {passTypeId}.\x12\xd5\x01\n\x1cgetCertificateSigningRequest\x12\x16.google.protobuf.Empty\x1a\x1d.io.CertificateSigningRequest\"~\x82\xd3\xe4\x93\x02*\x12(/certificate/certificate_signing_request\x92\x41K\x12%Get CSR (Certificate Signing Request)\x1a\"Gets a CSR for the logged in user.\x12\xa2\x01\n\x13\x61\x64\x64\x41ppleCertificate\x12\r.io.FileBytes\x1a\x13.io.CertificateData\"g\x82\xd3\xe4\x93\x02#\"\x1e/certificate/apple_certificate:\x01*\x92\x41;\x12\x15\x41\x64\x64 Apple certificate\x1a\"Uploads an Apple pass certificate.\x12\xbb\x01\n\x16updateAppleCertificate\x12\r.io.FileBytes\x1a\x13.io.CertificateData\"}\x82\xd3\xe4\x93\x02#\x1a\x1e/certificate/apple_certificate:\x01*\x92\x41Q\x12\x18Update Apple certificate\x1a\x35Updates or renews an existing Apple pass certificate.\x12\xbb\x01\n\x1flistAppleCertificatesDeprecated\x12\x0e.io.Pagination\x1a\x13.io.CertificateData\"q\x82\xd3\xe4\x93\x02\x0f\x12\r/certificates\x92\x41Y\x12)List Apple pass certificates [DEPRECATED]\x1a,Retrieves a users certificates [DEPRECATED].0\x01\x12\xa1\x01\n\x15listAppleCertificates\x12\x0b.io.Filters\x1a\x13.io.CertificateData\"d\x82\xd3\xe4\x93\x02\x1d\"\x18/certificates/apple/list:\x01*\x92\x41>\x12\x1cList Apple pass certificates\x1a\x1eRetrieves a users certificates0\x01\x12\xe0\x01\n countAppleCertificatesDeprecated\x12\x0e.io.Pagination\x1a\t.io.Count\"\xa0\x01\x82\xd3\xe4\x93\x02\x15\x12\x13/certificates/count\x92\x41\x81\x01\x12*Count Apple pass certificates [DEPRECATED]\x1aSRetrieves the total count of pass certificates for the logged in user [DEPRECATED].\x12\xc1\x01\n\x16\x63ountAppleCertificates\x12\x0b.io.Filters\x1a\t.io.Count\"\x8e\x01\x82\xd3\xe4\x93\x02\x1e\"\x19/certificates/apple/count:\x01*\x92\x41g\x12\x1d\x43ount Apple pass certificates\x1a\x46Retrieves the total count of pass certificates for the logged in user.\x12\xb4\x02\n\x19sendNFCSigningCredentials\x12 .io.NFCSigningCredentialsRequest\x1a\x16.google.protobuf.Empty\"\xdc\x01\x82\xd3\xe4\x93\x02\'\"\"/certificates/nfc/credentials/send:\x01*\x92\x41\xab\x01\x12\x1cSend NFC signing credentials\x1a\x8a\x01Sends the NFC signing credentials for a certificate to the registered email address of the user. Only works with NFC enabled certificates.B\xd8\x06\n\x10\x63om.passkit.grpcZ$stash.passkit.com/io/model/sdk/go/io\xaa\x02\x0cPassKit.Grpc\x92\x41\x8d\x06\x12\xda\x01\n\x18PassKit Certificates API\x12\x43\x41PI for managing Apple Wallet Pass Type Identifiers & Certificates.\x1a\x38https://passkit.com/legal/terms-of-subscription-service/\"?\n\x0fPassKit Support\x12\x17https://docs.passkit.io\x1a\x13support@passkit.com*\x01\x02\x32\x10\x61pplication/json:\x10\x61pplication/jsonR9\n\x03\x32\x30\x30\x12\x32\n(Returned when the request is successful.\x12\x06\n\x04\x9a\x02\x01\x07R4\n\x03\x34\x30\x30\x12-\n+Returned when wrong user input is provided.R0\n\x03\x34\x30\x31\x12)\n\'Returned when the user is unauthorized.RP\n\x03\x34\x30\x33\x12I\nGReturned when the user does not have permission to access the resource.R;\n\x03\x34\x30\x34\x12\x34\n*Returned when the resource does not exist.\x12\x06\n\x04\x9a\x02\x01\x07R<\n\x03\x35\x30\x30\x12\x35\n+Returned when there is an unexpected error.\x12\x06\n\x04\x9a\x02\x01\x07RW\n\x03\x35\x30\x33\x12P\nNServer is unavailable. Back off for 250ms and repeat request until successful.Z>\n<\n\napiKeyAuth\x12.\x08\x02\x12\x19JWT Authentication token.\x1a\rAuthorization \x02\x62\x06proto3')

_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'io.core.a_rpc_certificates_pb2', globals())
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\n\020com.passkit.grpcZ$stash.passkit.com/io/model/sdk/go/io\252\002\014PassKit.Grpc\222A\215\006\022\332\001\n\030PassKit Certificates API\022CAPI for managing Apple Wallet Pass Type Identifiers & Certificates.\0328https://passkit.com/legal/terms-of-subscription-service/\"?\n\017PassKit Support\022\027https://docs.passkit.io\032\023support@passkit.com*\001\0022\020application/json:\020application/jsonR9\n\003200\0222\n(Returned when the request is successful.\022\006\n\004\232\002\001\007R4\n\003400\022-\n+Returned when wrong user input is provided.R0\n\003401\022)\n\'Returned when the user is unauthorized.RP\n\003403\022I\nGReturned when the user does not have permission to access the resource.R;\n\003404\0224\n*Returned when the resource does not exist.\022\006\n\004\232\002\001\007R<\n\003500\0225\n+Returned when there is an unexpected error.\022\006\n\004\232\002\001\007RW\n\003503\022P\nNServer is unavailable. Back off for 250ms and repeat request until successful.Z>\n<\n\napiKeyAuth\022.\010\002\022\031JWT Authentication token.\032\rAuthorization \002'
  _CERTIFICATES.methods_by_name['getAppleCertificateData']._options = None
  _CERTIFICATES.methods_by_name['getAppleCertificateData']._serialized_options = b'\202\323\344\223\002\033\022\031/certificate/{passTypeId}\222Ao\022\032Get Apple pass certificate\032QGets the certificate data for certificate with Pass Type Identifier {passTypeId}.'
  _CERTIFICATES.methods_by_name['getCertificateSigningRequest']._options = None
  _CERTIFICATES.methods_by_name['getCertificateSigningRequest']._serialized_options = b'\202\323\344\223\002*\022(/certificate/certificate_signing_request\222AK\022%Get CSR (Certificate Signing Request)\032\"Gets a CSR for the logged in user.'
  _CERTIFICATES.methods_by_name['addAppleCertificate']._options = None
  _CERTIFICATES.methods_by_name['addAppleCertificate']._serialized_options = b'\202\323\344\223\002#\"\036/certificate/apple_certificate:\001*\222A;\022\025Add Apple certificate\032\"Uploads an Apple pass certificate.'
  _CERTIFICATES.methods_by_name['updateAppleCertificate']._options = None
  _CERTIFICATES.methods_by_name['updateAppleCertificate']._serialized_options = b'\202\323\344\223\002#\032\036/certificate/apple_certificate:\001*\222AQ\022\030Update Apple certificate\0325Updates or renews an existing Apple pass certificate.'
  _CERTIFICATES.methods_by_name['listAppleCertificatesDeprecated']._options = None
  _CERTIFICATES.methods_by_name['listAppleCertificatesDeprecated']._serialized_options = b'\202\323\344\223\002\017\022\r/certificates\222AY\022)List Apple pass certificates [DEPRECATED]\032,Retrieves a users certificates [DEPRECATED].'
  _CERTIFICATES.methods_by_name['listAppleCertificates']._options = None
  _CERTIFICATES.methods_by_name['listAppleCertificates']._serialized_options = b'\202\323\344\223\002\035\"\030/certificates/apple/list:\001*\222A>\022\034List Apple pass certificates\032\036Retrieves a users certificates'
  _CERTIFICATES.methods_by_name['countAppleCertificatesDeprecated']._options = None
  _CERTIFICATES.methods_by_name['countAppleCertificatesDeprecated']._serialized_options = b'\202\323\344\223\002\025\022\023/certificates/count\222A\201\001\022*Count Apple pass certificates [DEPRECATED]\032SRetrieves the total count of pass certificates for the logged in user [DEPRECATED].'
  _CERTIFICATES.methods_by_name['countAppleCertificates']._options = None
  _CERTIFICATES.methods_by_name['countAppleCertificates']._serialized_options = b'\202\323\344\223\002\036\"\031/certificates/apple/count:\001*\222Ag\022\035Count Apple pass certificates\032FRetrieves the total count of pass certificates for the logged in user.'
  _CERTIFICATES.methods_by_name['sendNFCSigningCredentials']._options = None
  _CERTIFICATES.methods_by_name['sendNFCSigningCredentials']._serialized_options = b'\202\323\344\223\002\'\"\"/certificates/nfc/credentials/send:\001*\222A\253\001\022\034Send NFC signing credentials\032\212\001Sends the NFC signing credentials for a certificate to the registered email address of the user. Only works with NFC enabled certificates.'
  _CERTIFICATES._serialized_start=266
  _CERTIFICATES._serialized_end=2162
# @@protoc_insertion_point(module_scope)
