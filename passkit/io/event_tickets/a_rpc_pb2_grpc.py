# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from passkit.io.common import common_objects_pb2 as passkit_dot_io_dot_common_dot_common__objects__pb2
from passkit.io.common import filter_pb2 as passkit_dot_io_dot_common_dot_filter__pb2
from passkit.io.common import reporting_pb2 as passkit_dot_io_dot_common_dot_reporting__pb2
from passkit.io.event_tickets import event_pb2 as passkit_dot_io_dot_event__tickets_dot_event__pb2
from passkit.io.event_tickets import production_pb2 as passkit_dot_io_dot_event__tickets_dot_production__pb2
from passkit.io.event_tickets import ticket_pb2 as passkit_dot_io_dot_event__tickets_dot_ticket__pb2
from passkit.io.event_tickets import ticket_type_pb2 as passkit_dot_io_dot_event__tickets_dot_ticket__type__pb2
from passkit.io.event_tickets import venue_pb2 as passkit_dot_io_dot_event__tickets_dot_venue__pb2


class EventTicketsStub(object):
    """The PassKit Event Tickets API allows you to create, manage, and distribute digital tickets for events, including productions, venues, ticket types, and individual tickets. Seamlessly issue and validate Apple Wallet and Google Wallet passes, automate event flows, and track redemptions in real time.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.createProduction = channel.unary_unary(
                '/event_tickets.EventTickets/createProduction',
                request_serializer=passkit_dot_io_dot_event__tickets_dot_production__pb2.Production.SerializeToString,
                response_deserializer=passkit_dot_io_dot_common_dot_common__objects__pb2.Id.FromString,
                _registered_method=True)
        self.patchProduction = channel.unary_unary(
                '/event_tickets.EventTickets/patchProduction',
                request_serializer=passkit_dot_io_dot_event__tickets_dot_production__pb2.Production.SerializeToString,
                response_deserializer=passkit_dot_io_dot_event__tickets_dot_production__pb2.Production.FromString,
                _registered_method=True)
        self.updateProduction = channel.unary_unary(
                '/event_tickets.EventTickets/updateProduction',
                request_serializer=passkit_dot_io_dot_event__tickets_dot_production__pb2.Production.SerializeToString,
                response_deserializer=passkit_dot_io_dot_event__tickets_dot_production__pb2.Production.FromString,
                _registered_method=True)
        self.getProduction = channel.unary_unary(
                '/event_tickets.EventTickets/getProduction',
                request_serializer=passkit_dot_io_dot_common_dot_common__objects__pb2.Id.SerializeToString,
                response_deserializer=passkit_dot_io_dot_event__tickets_dot_production__pb2.Production.FromString,
                _registered_method=True)
        self.deleteProduction = channel.unary_unary(
                '/event_tickets.EventTickets/deleteProduction',
                request_serializer=passkit_dot_io_dot_event__tickets_dot_production__pb2.Production.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.listProductions = channel.unary_stream(
                '/event_tickets.EventTickets/listProductions',
                request_serializer=passkit_dot_io_dot_common_dot_filter__pb2.Filters.SerializeToString,
                response_deserializer=passkit_dot_io_dot_event__tickets_dot_production__pb2.Production.FromString,
                _registered_method=True)
        self.getAnalytics = channel.unary_unary(
                '/event_tickets.EventTickets/getAnalytics',
                request_serializer=passkit_dot_io_dot_common_dot_reporting__pb2.AnalyticsRequest.SerializeToString,
                response_deserializer=passkit_dot_io_dot_event__tickets_dot_production__pb2.ProductionAnalyticsResponse.FromString,
                _registered_method=True)
        self.copyProduction = channel.unary_unary(
                '/event_tickets.EventTickets/copyProduction',
                request_serializer=passkit_dot_io_dot_event__tickets_dot_production__pb2.ProductionCopyRequest.SerializeToString,
                response_deserializer=passkit_dot_io_dot_common_dot_common__objects__pb2.Id.FromString,
                _registered_method=True)
        self.createVenue = channel.unary_unary(
                '/event_tickets.EventTickets/createVenue',
                request_serializer=passkit_dot_io_dot_event__tickets_dot_venue__pb2.Venue.SerializeToString,
                response_deserializer=passkit_dot_io_dot_common_dot_common__objects__pb2.Id.FromString,
                _registered_method=True)
        self.updateVenue = channel.unary_unary(
                '/event_tickets.EventTickets/updateVenue',
                request_serializer=passkit_dot_io_dot_event__tickets_dot_venue__pb2.Venue.SerializeToString,
                response_deserializer=passkit_dot_io_dot_event__tickets_dot_venue__pb2.Venue.FromString,
                _registered_method=True)
        self.patchVenue = channel.unary_unary(
                '/event_tickets.EventTickets/patchVenue',
                request_serializer=passkit_dot_io_dot_event__tickets_dot_venue__pb2.Venue.SerializeToString,
                response_deserializer=passkit_dot_io_dot_event__tickets_dot_venue__pb2.Venue.FromString,
                _registered_method=True)
        self.getVenueById = channel.unary_unary(
                '/event_tickets.EventTickets/getVenueById',
                request_serializer=passkit_dot_io_dot_common_dot_common__objects__pb2.Id.SerializeToString,
                response_deserializer=passkit_dot_io_dot_event__tickets_dot_venue__pb2.Venue.FromString,
                _registered_method=True)
        self.deleteVenue = channel.unary_unary(
                '/event_tickets.EventTickets/deleteVenue',
                request_serializer=passkit_dot_io_dot_event__tickets_dot_venue__pb2.Venue.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.listVenues = channel.unary_stream(
                '/event_tickets.EventTickets/listVenues',
                request_serializer=passkit_dot_io_dot_common_dot_filter__pb2.Filters.SerializeToString,
                response_deserializer=passkit_dot_io_dot_event__tickets_dot_venue__pb2.Venue.FromString,
                _registered_method=True)
        self.createEvent = channel.unary_unary(
                '/event_tickets.EventTickets/createEvent',
                request_serializer=passkit_dot_io_dot_event__tickets_dot_event__pb2.Event.SerializeToString,
                response_deserializer=passkit_dot_io_dot_common_dot_common__objects__pb2.Id.FromString,
                _registered_method=True)
        self.updateEvent = channel.unary_unary(
                '/event_tickets.EventTickets/updateEvent',
                request_serializer=passkit_dot_io_dot_event__tickets_dot_event__pb2.Event.SerializeToString,
                response_deserializer=passkit_dot_io_dot_event__tickets_dot_event__pb2.Event.FromString,
                _registered_method=True)
        self.patchEvent = channel.unary_unary(
                '/event_tickets.EventTickets/patchEvent',
                request_serializer=passkit_dot_io_dot_event__tickets_dot_event__pb2.Event.SerializeToString,
                response_deserializer=passkit_dot_io_dot_event__tickets_dot_event__pb2.Event.FromString,
                _registered_method=True)
        self.getEventById = channel.unary_unary(
                '/event_tickets.EventTickets/getEventById',
                request_serializer=passkit_dot_io_dot_common_dot_common__objects__pb2.Id.SerializeToString,
                response_deserializer=passkit_dot_io_dot_event__tickets_dot_event__pb2.Event.FromString,
                _registered_method=True)
        self.getEventByStartDateAndVenue = channel.unary_unary(
                '/event_tickets.EventTickets/getEventByStartDateAndVenue',
                request_serializer=passkit_dot_io_dot_event__tickets_dot_event__pb2.GetEventRequest.SerializeToString,
                response_deserializer=passkit_dot_io_dot_event__tickets_dot_event__pb2.Event.FromString,
                _registered_method=True)
        self.deleteEvent = channel.unary_unary(
                '/event_tickets.EventTickets/deleteEvent',
                request_serializer=passkit_dot_io_dot_event__tickets_dot_event__pb2.Event.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.listEvents = channel.unary_stream(
                '/event_tickets.EventTickets/listEvents',
                request_serializer=passkit_dot_io_dot_event__tickets_dot_event__pb2.EventListRequest.SerializeToString,
                response_deserializer=passkit_dot_io_dot_event__tickets_dot_event__pb2.EventListResponse.FromString,
                _registered_method=True)
        self.createTicketType = channel.unary_unary(
                '/event_tickets.EventTickets/createTicketType',
                request_serializer=passkit_dot_io_dot_event__tickets_dot_ticket__type__pb2.TicketType.SerializeToString,
                response_deserializer=passkit_dot_io_dot_common_dot_common__objects__pb2.Id.FromString,
                _registered_method=True)
        self.updateTicketType = channel.unary_unary(
                '/event_tickets.EventTickets/updateTicketType',
                request_serializer=passkit_dot_io_dot_event__tickets_dot_ticket__type__pb2.TicketType.SerializeToString,
                response_deserializer=passkit_dot_io_dot_event__tickets_dot_ticket__type__pb2.TicketType.FromString,
                _registered_method=True)
        self.patchTicketType = channel.unary_unary(
                '/event_tickets.EventTickets/patchTicketType',
                request_serializer=passkit_dot_io_dot_event__tickets_dot_ticket__type__pb2.TicketType.SerializeToString,
                response_deserializer=passkit_dot_io_dot_event__tickets_dot_ticket__type__pb2.TicketType.FromString,
                _registered_method=True)
        self.getTicketTypeById = channel.unary_unary(
                '/event_tickets.EventTickets/getTicketTypeById',
                request_serializer=passkit_dot_io_dot_common_dot_common__objects__pb2.Id.SerializeToString,
                response_deserializer=passkit_dot_io_dot_event__tickets_dot_ticket__type__pb2.TicketType.FromString,
                _registered_method=True)
        self.getTicketTypeByUserDefinedId = channel.unary_unary(
                '/event_tickets.EventTickets/getTicketTypeByUserDefinedId',
                request_serializer=passkit_dot_io_dot_event__tickets_dot_ticket__type__pb2.GetByUidRequest.SerializeToString,
                response_deserializer=passkit_dot_io_dot_event__tickets_dot_ticket__type__pb2.TicketType.FromString,
                _registered_method=True)
        self.deleteTicketType = channel.unary_unary(
                '/event_tickets.EventTickets/deleteTicketType',
                request_serializer=passkit_dot_io_dot_event__tickets_dot_ticket__type__pb2.TicketType.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.listTicketTypes = channel.unary_stream(
                '/event_tickets.EventTickets/listTicketTypes',
                request_serializer=passkit_dot_io_dot_event__tickets_dot_ticket__type__pb2.TicketTypeListRequest.SerializeToString,
                response_deserializer=passkit_dot_io_dot_event__tickets_dot_ticket__type__pb2.TicketType.FromString,
                _registered_method=True)
        self.issueTicket = channel.unary_unary(
                '/event_tickets.EventTickets/issueTicket',
                request_serializer=passkit_dot_io_dot_event__tickets_dot_ticket__pb2.IssueTicketRequest.SerializeToString,
                response_deserializer=passkit_dot_io_dot_common_dot_common__objects__pb2.Id.FromString,
                _registered_method=True)
        self.issueTicketById = channel.unary_unary(
                '/event_tickets.EventTickets/issueTicketById',
                request_serializer=passkit_dot_io_dot_event__tickets_dot_ticket__pb2.Ticket.SerializeToString,
                response_deserializer=passkit_dot_io_dot_event__tickets_dot_ticket__pb2.IssueTicketResponseIds.FromString,
                _registered_method=True)
        self.updateTicket = channel.unary_unary(
                '/event_tickets.EventTickets/updateTicket',
                request_serializer=passkit_dot_io_dot_event__tickets_dot_ticket__pb2.Ticket.SerializeToString,
                response_deserializer=passkit_dot_io_dot_common_dot_common__objects__pb2.Id.FromString,
                _registered_method=True)
        self.patchPerson = channel.unary_unary(
                '/event_tickets.EventTickets/patchPerson',
                request_serializer=passkit_dot_io_dot_event__tickets_dot_ticket__pb2.EventTicketPerson.SerializeToString,
                response_deserializer=passkit_dot_io_dot_common_dot_common__objects__pb2.Id.FromString,
                _registered_method=True)
        self.validateTicket = channel.unary_unary(
                '/event_tickets.EventTickets/validateTicket',
                request_serializer=passkit_dot_io_dot_event__tickets_dot_ticket__pb2.ValidateTicketRequest.SerializeToString,
                response_deserializer=passkit_dot_io_dot_event__tickets_dot_ticket__pb2.ValidateTicketResponse.FromString,
                _registered_method=True)
        self.redeemTicket = channel.unary_unary(
                '/event_tickets.EventTickets/redeemTicket',
                request_serializer=passkit_dot_io_dot_event__tickets_dot_ticket__pb2.RedeemTicketRequest.SerializeToString,
                response_deserializer=passkit_dot_io_dot_common_dot_common__objects__pb2.Id.FromString,
                _registered_method=True)
        self.redeemTicketsByOrderNumber = channel.unary_unary(
                '/event_tickets.EventTickets/redeemTicketsByOrderNumber',
                request_serializer=passkit_dot_io_dot_event__tickets_dot_ticket__pb2.RedeemByOrderNumber.SerializeToString,
                response_deserializer=passkit_dot_io_dot_common_dot_common__objects__pb2.Ids.FromString,
                _registered_method=True)
        self.getTicketById = channel.unary_unary(
                '/event_tickets.EventTickets/getTicketById',
                request_serializer=passkit_dot_io_dot_common_dot_common__objects__pb2.Id.SerializeToString,
                response_deserializer=passkit_dot_io_dot_event__tickets_dot_ticket__pb2.Ticket.FromString,
                _registered_method=True)
        self.getTicketByTicketNumber = channel.unary_unary(
                '/event_tickets.EventTickets/getTicketByTicketNumber',
                request_serializer=passkit_dot_io_dot_event__tickets_dot_ticket__pb2.TicketNumberRequest.SerializeToString,
                response_deserializer=passkit_dot_io_dot_event__tickets_dot_ticket__pb2.Ticket.FromString,
                _registered_method=True)
        self.getTicketsByOrderNumber = channel.unary_unary(
                '/event_tickets.EventTickets/getTicketsByOrderNumber',
                request_serializer=passkit_dot_io_dot_event__tickets_dot_ticket__pb2.OrderNumberRequest.SerializeToString,
                response_deserializer=passkit_dot_io_dot_event__tickets_dot_ticket__pb2.Tickets.FromString,
                _registered_method=True)
        self.getEventTicketPass = channel.unary_unary(
                '/event_tickets.EventTickets/getEventTicketPass',
                request_serializer=passkit_dot_io_dot_event__tickets_dot_ticket__pb2.EventTicketPassRequest.SerializeToString,
                response_deserializer=passkit_dot_io_dot_common_dot_common__objects__pb2.PassBundles.FromString,
                _registered_method=True)
        self.deleteTicket = channel.unary_unary(
                '/event_tickets.EventTickets/deleteTicket',
                request_serializer=passkit_dot_io_dot_event__tickets_dot_ticket__pb2.TicketId.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.bulkDeleteTickets = channel.unary_unary(
                '/event_tickets.EventTickets/bulkDeleteTickets',
                request_serializer=passkit_dot_io_dot_common_dot_common__objects__pb2.BulkPassActionRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.deleteTicketsByOrderNumber = channel.unary_unary(
                '/event_tickets.EventTickets/deleteTicketsByOrderNumber',
                request_serializer=passkit_dot_io_dot_event__tickets_dot_ticket__pb2.OrderNumberRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.listTickets = channel.unary_stream(
                '/event_tickets.EventTickets/listTickets',
                request_serializer=passkit_dot_io_dot_event__tickets_dot_ticket__pb2.TicketListRequest.SerializeToString,
                response_deserializer=passkit_dot_io_dot_event__tickets_dot_ticket__pb2.TicketLimitedFields.FromString,
                _registered_method=True)
        self.countTickets = channel.unary_unary(
                '/event_tickets.EventTickets/countTickets',
                request_serializer=passkit_dot_io_dot_event__tickets_dot_ticket__pb2.TicketListRequest.SerializeToString,
                response_deserializer=passkit_dot_io_dot_common_dot_common__objects__pb2.Count.FromString,
                _registered_method=True)


class EventTicketsServicer(object):
    """The PassKit Event Tickets API allows you to create, manage, and distribute digital tickets for events, including productions, venues, ticket types, and individual tickets. Seamlessly issue and validate Apple Wallet and Google Wallet passes, automate event flows, and track redemptions in real time.
    """

    def createProduction(self, request, context):
        """Creates a new Production record. Required fields: name.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def patchProduction(self, request, context):
        """Partially updates an existing Production. Required fields: id and fields to update. Note: changes will update and affect all existing Events & Tickets related to this Production.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateProduction(self, request, context):
        """Fully updates an existing Production. Required fields: id and all required fields are required. Note: changes will update and affect all existing Events & Tickets related to this Production.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getProduction(self, request, context):
        """Retrieves a Production by ID. Required fields: id.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteProduction(self, request, context):
        """Deletes a Production and all associated Events and Tickets. Required fields: id. Use with caution, as this action is irreversible.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listProductions(self, request, context):
        """Lists all Productions for the authenticated user. Supports filtering options to narrow down the results based on specific criteria.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAnalytics(self, request, context):
        """Retrieves analytics for a specific Production. Required fields: classId and protocol.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def copyProduction(self, request, context):
        """Creates a copy of an existing Production. Required fields: id.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createVenue(self, request, context):
        """Creates a new Venue record. Required fields: name and address.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateVenue(self, request, context):
        """Fully updates an existing Venue. Required fields: id and all required fields are required. Note: changes will update and affect all existing Events & Tickets related to this Venue.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def patchVenue(self, request, context):
        """Partially updates an existing Venue. Required fields: id and fields to update. Note: changes will update and affect all existing Events & Tickets related to this Venue.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getVenueById(self, request, context):
        """Retrieves a Venue by ID. Required fields: id.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteVenue(self, request, context):
        """Deletes a Venue and all associated Events and Tickets. Required fields: id. Use with caution, as this action is irreversible.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listVenues(self, request, context):
        """Lists all Venues for the authenticated user. Supports filtering options to narrow down the results based on specific criteria.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createEvent(self, request, context):
        """Creates a new Event for a Production. Required fields: production object and venue object.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateEvent(self, request, context):
        """Fully updates an existing Event. Required fields: id and all required fields are required. Note: changes will update & affect all existing tickets related to this event. Production and Venue cannot be changed from this endpoint.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def patchEvent(self, request, context):
        """Partially updates an existing Event. Required fields: id and fields to update. Note: changes will update & affect all existing tickets related to this event. Production and Venue cannot be changed from this endpoint.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getEventById(self, request, context):
        """Retrieves an Event by ID. Required fields: id.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getEventByStartDateAndVenue(self, request, context):
        """Retrieves an Event by start date and venue. Required fields: productionId, venueId, startDate.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteEvent(self, request, context):
        """Deletes an Event and all associated Tickets. Required fields: id. Use with caution, as this action is irreversible.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listEvents(self, request, context):
        """Lists Events for a Production. Required fields: productionId. Supports filtering options to narrow down the results based on specific criteria.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createTicketType(self, request, context):
        """Creates a new Ticket Type. Required fields: name, productionId and beforeRedeemPassTemplateId.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateTicketType(self, request, context):
        """Fully updates an existing Ticket Type. Required fields: name, productionId, beforeRedeemPassTemplateId and all required fields are required. Note: changes will update & affect all existing Tickets related to this Ticket Type.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def patchTicketType(self, request, context):
        """Partially updates an existing Ticket Type. Required fields: name, productionId, beforeRedeemPassTemplateId fields to update. Note: changes will update & affect all existing Tickets related to this Ticket Type.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTicketTypeById(self, request, context):
        """Retrieves a Ticket Type by ID. Required fields: id.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTicketTypeByUserDefinedId(self, request, context):
        """Retrieves a Ticket Type by User Defined ID. Required fields: productionId, uid.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteTicketType(self, request, context):
        """Deletes a Ticket Type and all associated Tickets. Required fields: id, or productionId and uid. Use with caution, as this action is irreversible.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listTicketTypes(self, request, context):
        """Lists all Ticket Types for a Production. Required fields: productionId. Supports filtering options to narrow down the results based on specific criteria.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def issueTicket(self, request, context):
        """Issues a new Ticket by PassKit IDs. Required fields: ticketTypeId, eventId, ticketNumber, person.name.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def issueTicketById(self, request, context):
        """Issues a new Ticket by User Defined IDs. Required fields: productionUid, venueUid, ticketTypeUid, event.startDate and ticket.ticketNumber.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateTicket(self, request, context):
        """Updates an existing Ticket. Required fields: id or (ticketNumber + productionId).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def patchPerson(self, request, context):
        """Updates personal information for a ticket holder. Required fields: ticketId or (ticketNumber + productionId), person.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def validateTicket(self, request, context):
        """Validates a Ticket. Required fields: id or (ticketNumber + productionId).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def redeemTicket(self, request, context):
        """Redeems a Ticket. Required fields: id or (ticketNumber + productionId).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def redeemTicketsByOrderNumber(self, request, context):
        """Redeems multiple Tickets by order number. Required fields: productionid or productionUid, and orderNumber.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTicketById(self, request, context):
        """Retrieves a Ticket by ID. Required fields: id.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTicketByTicketNumber(self, request, context):
        """Retrieves a Ticket by ticket number. Required fields: productionId and ticketNumber.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTicketsByOrderNumber(self, request, context):
        """Retrieves Tickets by order number. Required fields: productionId and orderNumber.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getEventTicketPass(self, request, context):
        """Retrieves the digital pass bundle for a Ticket. Required fields: ticketId or (productionId + ticketNumber/orderNumber).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteTicket(self, request, context):
        """Deletes a Ticket. Required fields: id or (ticketNumber + productionId).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def bulkDeleteTickets(self, request, context):
        """Deletes multiple Tickets using a filter. Required fields: classId, protocol and filters.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteTicketsByOrderNumber(self, request, context):
        """Deletes Tickets by order number. Required fields: productionId or productionUid and orderNumber.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listTickets(self, request, context):
        """Lists all Tickets for a Production. Required fields: productionId + ticketTypeId + eventId.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def countTickets(self, request, context):
        """Counts the number of Tickets matching the filter. Required fields: productionId + ticketTypeId + eventId.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EventTicketsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'createProduction': grpc.unary_unary_rpc_method_handler(
                    servicer.createProduction,
                    request_deserializer=passkit_dot_io_dot_event__tickets_dot_production__pb2.Production.FromString,
                    response_serializer=passkit_dot_io_dot_common_dot_common__objects__pb2.Id.SerializeToString,
            ),
            'patchProduction': grpc.unary_unary_rpc_method_handler(
                    servicer.patchProduction,
                    request_deserializer=passkit_dot_io_dot_event__tickets_dot_production__pb2.Production.FromString,
                    response_serializer=passkit_dot_io_dot_event__tickets_dot_production__pb2.Production.SerializeToString,
            ),
            'updateProduction': grpc.unary_unary_rpc_method_handler(
                    servicer.updateProduction,
                    request_deserializer=passkit_dot_io_dot_event__tickets_dot_production__pb2.Production.FromString,
                    response_serializer=passkit_dot_io_dot_event__tickets_dot_production__pb2.Production.SerializeToString,
            ),
            'getProduction': grpc.unary_unary_rpc_method_handler(
                    servicer.getProduction,
                    request_deserializer=passkit_dot_io_dot_common_dot_common__objects__pb2.Id.FromString,
                    response_serializer=passkit_dot_io_dot_event__tickets_dot_production__pb2.Production.SerializeToString,
            ),
            'deleteProduction': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteProduction,
                    request_deserializer=passkit_dot_io_dot_event__tickets_dot_production__pb2.Production.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'listProductions': grpc.unary_stream_rpc_method_handler(
                    servicer.listProductions,
                    request_deserializer=passkit_dot_io_dot_common_dot_filter__pb2.Filters.FromString,
                    response_serializer=passkit_dot_io_dot_event__tickets_dot_production__pb2.Production.SerializeToString,
            ),
            'getAnalytics': grpc.unary_unary_rpc_method_handler(
                    servicer.getAnalytics,
                    request_deserializer=passkit_dot_io_dot_common_dot_reporting__pb2.AnalyticsRequest.FromString,
                    response_serializer=passkit_dot_io_dot_event__tickets_dot_production__pb2.ProductionAnalyticsResponse.SerializeToString,
            ),
            'copyProduction': grpc.unary_unary_rpc_method_handler(
                    servicer.copyProduction,
                    request_deserializer=passkit_dot_io_dot_event__tickets_dot_production__pb2.ProductionCopyRequest.FromString,
                    response_serializer=passkit_dot_io_dot_common_dot_common__objects__pb2.Id.SerializeToString,
            ),
            'createVenue': grpc.unary_unary_rpc_method_handler(
                    servicer.createVenue,
                    request_deserializer=passkit_dot_io_dot_event__tickets_dot_venue__pb2.Venue.FromString,
                    response_serializer=passkit_dot_io_dot_common_dot_common__objects__pb2.Id.SerializeToString,
            ),
            'updateVenue': grpc.unary_unary_rpc_method_handler(
                    servicer.updateVenue,
                    request_deserializer=passkit_dot_io_dot_event__tickets_dot_venue__pb2.Venue.FromString,
                    response_serializer=passkit_dot_io_dot_event__tickets_dot_venue__pb2.Venue.SerializeToString,
            ),
            'patchVenue': grpc.unary_unary_rpc_method_handler(
                    servicer.patchVenue,
                    request_deserializer=passkit_dot_io_dot_event__tickets_dot_venue__pb2.Venue.FromString,
                    response_serializer=passkit_dot_io_dot_event__tickets_dot_venue__pb2.Venue.SerializeToString,
            ),
            'getVenueById': grpc.unary_unary_rpc_method_handler(
                    servicer.getVenueById,
                    request_deserializer=passkit_dot_io_dot_common_dot_common__objects__pb2.Id.FromString,
                    response_serializer=passkit_dot_io_dot_event__tickets_dot_venue__pb2.Venue.SerializeToString,
            ),
            'deleteVenue': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteVenue,
                    request_deserializer=passkit_dot_io_dot_event__tickets_dot_venue__pb2.Venue.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'listVenues': grpc.unary_stream_rpc_method_handler(
                    servicer.listVenues,
                    request_deserializer=passkit_dot_io_dot_common_dot_filter__pb2.Filters.FromString,
                    response_serializer=passkit_dot_io_dot_event__tickets_dot_venue__pb2.Venue.SerializeToString,
            ),
            'createEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.createEvent,
                    request_deserializer=passkit_dot_io_dot_event__tickets_dot_event__pb2.Event.FromString,
                    response_serializer=passkit_dot_io_dot_common_dot_common__objects__pb2.Id.SerializeToString,
            ),
            'updateEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.updateEvent,
                    request_deserializer=passkit_dot_io_dot_event__tickets_dot_event__pb2.Event.FromString,
                    response_serializer=passkit_dot_io_dot_event__tickets_dot_event__pb2.Event.SerializeToString,
            ),
            'patchEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.patchEvent,
                    request_deserializer=passkit_dot_io_dot_event__tickets_dot_event__pb2.Event.FromString,
                    response_serializer=passkit_dot_io_dot_event__tickets_dot_event__pb2.Event.SerializeToString,
            ),
            'getEventById': grpc.unary_unary_rpc_method_handler(
                    servicer.getEventById,
                    request_deserializer=passkit_dot_io_dot_common_dot_common__objects__pb2.Id.FromString,
                    response_serializer=passkit_dot_io_dot_event__tickets_dot_event__pb2.Event.SerializeToString,
            ),
            'getEventByStartDateAndVenue': grpc.unary_unary_rpc_method_handler(
                    servicer.getEventByStartDateAndVenue,
                    request_deserializer=passkit_dot_io_dot_event__tickets_dot_event__pb2.GetEventRequest.FromString,
                    response_serializer=passkit_dot_io_dot_event__tickets_dot_event__pb2.Event.SerializeToString,
            ),
            'deleteEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteEvent,
                    request_deserializer=passkit_dot_io_dot_event__tickets_dot_event__pb2.Event.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'listEvents': grpc.unary_stream_rpc_method_handler(
                    servicer.listEvents,
                    request_deserializer=passkit_dot_io_dot_event__tickets_dot_event__pb2.EventListRequest.FromString,
                    response_serializer=passkit_dot_io_dot_event__tickets_dot_event__pb2.EventListResponse.SerializeToString,
            ),
            'createTicketType': grpc.unary_unary_rpc_method_handler(
                    servicer.createTicketType,
                    request_deserializer=passkit_dot_io_dot_event__tickets_dot_ticket__type__pb2.TicketType.FromString,
                    response_serializer=passkit_dot_io_dot_common_dot_common__objects__pb2.Id.SerializeToString,
            ),
            'updateTicketType': grpc.unary_unary_rpc_method_handler(
                    servicer.updateTicketType,
                    request_deserializer=passkit_dot_io_dot_event__tickets_dot_ticket__type__pb2.TicketType.FromString,
                    response_serializer=passkit_dot_io_dot_event__tickets_dot_ticket__type__pb2.TicketType.SerializeToString,
            ),
            'patchTicketType': grpc.unary_unary_rpc_method_handler(
                    servicer.patchTicketType,
                    request_deserializer=passkit_dot_io_dot_event__tickets_dot_ticket__type__pb2.TicketType.FromString,
                    response_serializer=passkit_dot_io_dot_event__tickets_dot_ticket__type__pb2.TicketType.SerializeToString,
            ),
            'getTicketTypeById': grpc.unary_unary_rpc_method_handler(
                    servicer.getTicketTypeById,
                    request_deserializer=passkit_dot_io_dot_common_dot_common__objects__pb2.Id.FromString,
                    response_serializer=passkit_dot_io_dot_event__tickets_dot_ticket__type__pb2.TicketType.SerializeToString,
            ),
            'getTicketTypeByUserDefinedId': grpc.unary_unary_rpc_method_handler(
                    servicer.getTicketTypeByUserDefinedId,
                    request_deserializer=passkit_dot_io_dot_event__tickets_dot_ticket__type__pb2.GetByUidRequest.FromString,
                    response_serializer=passkit_dot_io_dot_event__tickets_dot_ticket__type__pb2.TicketType.SerializeToString,
            ),
            'deleteTicketType': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteTicketType,
                    request_deserializer=passkit_dot_io_dot_event__tickets_dot_ticket__type__pb2.TicketType.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'listTicketTypes': grpc.unary_stream_rpc_method_handler(
                    servicer.listTicketTypes,
                    request_deserializer=passkit_dot_io_dot_event__tickets_dot_ticket__type__pb2.TicketTypeListRequest.FromString,
                    response_serializer=passkit_dot_io_dot_event__tickets_dot_ticket__type__pb2.TicketType.SerializeToString,
            ),
            'issueTicket': grpc.unary_unary_rpc_method_handler(
                    servicer.issueTicket,
                    request_deserializer=passkit_dot_io_dot_event__tickets_dot_ticket__pb2.IssueTicketRequest.FromString,
                    response_serializer=passkit_dot_io_dot_common_dot_common__objects__pb2.Id.SerializeToString,
            ),
            'issueTicketById': grpc.unary_unary_rpc_method_handler(
                    servicer.issueTicketById,
                    request_deserializer=passkit_dot_io_dot_event__tickets_dot_ticket__pb2.Ticket.FromString,
                    response_serializer=passkit_dot_io_dot_event__tickets_dot_ticket__pb2.IssueTicketResponseIds.SerializeToString,
            ),
            'updateTicket': grpc.unary_unary_rpc_method_handler(
                    servicer.updateTicket,
                    request_deserializer=passkit_dot_io_dot_event__tickets_dot_ticket__pb2.Ticket.FromString,
                    response_serializer=passkit_dot_io_dot_common_dot_common__objects__pb2.Id.SerializeToString,
            ),
            'patchPerson': grpc.unary_unary_rpc_method_handler(
                    servicer.patchPerson,
                    request_deserializer=passkit_dot_io_dot_event__tickets_dot_ticket__pb2.EventTicketPerson.FromString,
                    response_serializer=passkit_dot_io_dot_common_dot_common__objects__pb2.Id.SerializeToString,
            ),
            'validateTicket': grpc.unary_unary_rpc_method_handler(
                    servicer.validateTicket,
                    request_deserializer=passkit_dot_io_dot_event__tickets_dot_ticket__pb2.ValidateTicketRequest.FromString,
                    response_serializer=passkit_dot_io_dot_event__tickets_dot_ticket__pb2.ValidateTicketResponse.SerializeToString,
            ),
            'redeemTicket': grpc.unary_unary_rpc_method_handler(
                    servicer.redeemTicket,
                    request_deserializer=passkit_dot_io_dot_event__tickets_dot_ticket__pb2.RedeemTicketRequest.FromString,
                    response_serializer=passkit_dot_io_dot_common_dot_common__objects__pb2.Id.SerializeToString,
            ),
            'redeemTicketsByOrderNumber': grpc.unary_unary_rpc_method_handler(
                    servicer.redeemTicketsByOrderNumber,
                    request_deserializer=passkit_dot_io_dot_event__tickets_dot_ticket__pb2.RedeemByOrderNumber.FromString,
                    response_serializer=passkit_dot_io_dot_common_dot_common__objects__pb2.Ids.SerializeToString,
            ),
            'getTicketById': grpc.unary_unary_rpc_method_handler(
                    servicer.getTicketById,
                    request_deserializer=passkit_dot_io_dot_common_dot_common__objects__pb2.Id.FromString,
                    response_serializer=passkit_dot_io_dot_event__tickets_dot_ticket__pb2.Ticket.SerializeToString,
            ),
            'getTicketByTicketNumber': grpc.unary_unary_rpc_method_handler(
                    servicer.getTicketByTicketNumber,
                    request_deserializer=passkit_dot_io_dot_event__tickets_dot_ticket__pb2.TicketNumberRequest.FromString,
                    response_serializer=passkit_dot_io_dot_event__tickets_dot_ticket__pb2.Ticket.SerializeToString,
            ),
            'getTicketsByOrderNumber': grpc.unary_unary_rpc_method_handler(
                    servicer.getTicketsByOrderNumber,
                    request_deserializer=passkit_dot_io_dot_event__tickets_dot_ticket__pb2.OrderNumberRequest.FromString,
                    response_serializer=passkit_dot_io_dot_event__tickets_dot_ticket__pb2.Tickets.SerializeToString,
            ),
            'getEventTicketPass': grpc.unary_unary_rpc_method_handler(
                    servicer.getEventTicketPass,
                    request_deserializer=passkit_dot_io_dot_event__tickets_dot_ticket__pb2.EventTicketPassRequest.FromString,
                    response_serializer=passkit_dot_io_dot_common_dot_common__objects__pb2.PassBundles.SerializeToString,
            ),
            'deleteTicket': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteTicket,
                    request_deserializer=passkit_dot_io_dot_event__tickets_dot_ticket__pb2.TicketId.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'bulkDeleteTickets': grpc.unary_unary_rpc_method_handler(
                    servicer.bulkDeleteTickets,
                    request_deserializer=passkit_dot_io_dot_common_dot_common__objects__pb2.BulkPassActionRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'deleteTicketsByOrderNumber': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteTicketsByOrderNumber,
                    request_deserializer=passkit_dot_io_dot_event__tickets_dot_ticket__pb2.OrderNumberRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'listTickets': grpc.unary_stream_rpc_method_handler(
                    servicer.listTickets,
                    request_deserializer=passkit_dot_io_dot_event__tickets_dot_ticket__pb2.TicketListRequest.FromString,
                    response_serializer=passkit_dot_io_dot_event__tickets_dot_ticket__pb2.TicketLimitedFields.SerializeToString,
            ),
            'countTickets': grpc.unary_unary_rpc_method_handler(
                    servicer.countTickets,
                    request_deserializer=passkit_dot_io_dot_event__tickets_dot_ticket__pb2.TicketListRequest.FromString,
                    response_serializer=passkit_dot_io_dot_common_dot_common__objects__pb2.Count.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'event_tickets.EventTickets', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('event_tickets.EventTickets', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class EventTickets(object):
    """The PassKit Event Tickets API allows you to create, manage, and distribute digital tickets for events, including productions, venues, ticket types, and individual tickets. Seamlessly issue and validate Apple Wallet and Google Wallet passes, automate event flows, and track redemptions in real time.
    """

    @staticmethod
    def createProduction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event_tickets.EventTickets/createProduction',
            passkit_dot_io_dot_event__tickets_dot_production__pb2.Production.SerializeToString,
            passkit_dot_io_dot_common_dot_common__objects__pb2.Id.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def patchProduction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event_tickets.EventTickets/patchProduction',
            passkit_dot_io_dot_event__tickets_dot_production__pb2.Production.SerializeToString,
            passkit_dot_io_dot_event__tickets_dot_production__pb2.Production.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def updateProduction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event_tickets.EventTickets/updateProduction',
            passkit_dot_io_dot_event__tickets_dot_production__pb2.Production.SerializeToString,
            passkit_dot_io_dot_event__tickets_dot_production__pb2.Production.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getProduction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event_tickets.EventTickets/getProduction',
            passkit_dot_io_dot_common_dot_common__objects__pb2.Id.SerializeToString,
            passkit_dot_io_dot_event__tickets_dot_production__pb2.Production.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def deleteProduction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event_tickets.EventTickets/deleteProduction',
            passkit_dot_io_dot_event__tickets_dot_production__pb2.Production.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def listProductions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/event_tickets.EventTickets/listProductions',
            passkit_dot_io_dot_common_dot_filter__pb2.Filters.SerializeToString,
            passkit_dot_io_dot_event__tickets_dot_production__pb2.Production.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getAnalytics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event_tickets.EventTickets/getAnalytics',
            passkit_dot_io_dot_common_dot_reporting__pb2.AnalyticsRequest.SerializeToString,
            passkit_dot_io_dot_event__tickets_dot_production__pb2.ProductionAnalyticsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def copyProduction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event_tickets.EventTickets/copyProduction',
            passkit_dot_io_dot_event__tickets_dot_production__pb2.ProductionCopyRequest.SerializeToString,
            passkit_dot_io_dot_common_dot_common__objects__pb2.Id.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def createVenue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event_tickets.EventTickets/createVenue',
            passkit_dot_io_dot_event__tickets_dot_venue__pb2.Venue.SerializeToString,
            passkit_dot_io_dot_common_dot_common__objects__pb2.Id.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def updateVenue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event_tickets.EventTickets/updateVenue',
            passkit_dot_io_dot_event__tickets_dot_venue__pb2.Venue.SerializeToString,
            passkit_dot_io_dot_event__tickets_dot_venue__pb2.Venue.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def patchVenue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event_tickets.EventTickets/patchVenue',
            passkit_dot_io_dot_event__tickets_dot_venue__pb2.Venue.SerializeToString,
            passkit_dot_io_dot_event__tickets_dot_venue__pb2.Venue.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getVenueById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event_tickets.EventTickets/getVenueById',
            passkit_dot_io_dot_common_dot_common__objects__pb2.Id.SerializeToString,
            passkit_dot_io_dot_event__tickets_dot_venue__pb2.Venue.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def deleteVenue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event_tickets.EventTickets/deleteVenue',
            passkit_dot_io_dot_event__tickets_dot_venue__pb2.Venue.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def listVenues(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/event_tickets.EventTickets/listVenues',
            passkit_dot_io_dot_common_dot_filter__pb2.Filters.SerializeToString,
            passkit_dot_io_dot_event__tickets_dot_venue__pb2.Venue.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def createEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event_tickets.EventTickets/createEvent',
            passkit_dot_io_dot_event__tickets_dot_event__pb2.Event.SerializeToString,
            passkit_dot_io_dot_common_dot_common__objects__pb2.Id.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def updateEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event_tickets.EventTickets/updateEvent',
            passkit_dot_io_dot_event__tickets_dot_event__pb2.Event.SerializeToString,
            passkit_dot_io_dot_event__tickets_dot_event__pb2.Event.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def patchEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event_tickets.EventTickets/patchEvent',
            passkit_dot_io_dot_event__tickets_dot_event__pb2.Event.SerializeToString,
            passkit_dot_io_dot_event__tickets_dot_event__pb2.Event.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getEventById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event_tickets.EventTickets/getEventById',
            passkit_dot_io_dot_common_dot_common__objects__pb2.Id.SerializeToString,
            passkit_dot_io_dot_event__tickets_dot_event__pb2.Event.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getEventByStartDateAndVenue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event_tickets.EventTickets/getEventByStartDateAndVenue',
            passkit_dot_io_dot_event__tickets_dot_event__pb2.GetEventRequest.SerializeToString,
            passkit_dot_io_dot_event__tickets_dot_event__pb2.Event.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def deleteEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event_tickets.EventTickets/deleteEvent',
            passkit_dot_io_dot_event__tickets_dot_event__pb2.Event.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def listEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/event_tickets.EventTickets/listEvents',
            passkit_dot_io_dot_event__tickets_dot_event__pb2.EventListRequest.SerializeToString,
            passkit_dot_io_dot_event__tickets_dot_event__pb2.EventListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def createTicketType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event_tickets.EventTickets/createTicketType',
            passkit_dot_io_dot_event__tickets_dot_ticket__type__pb2.TicketType.SerializeToString,
            passkit_dot_io_dot_common_dot_common__objects__pb2.Id.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def updateTicketType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event_tickets.EventTickets/updateTicketType',
            passkit_dot_io_dot_event__tickets_dot_ticket__type__pb2.TicketType.SerializeToString,
            passkit_dot_io_dot_event__tickets_dot_ticket__type__pb2.TicketType.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def patchTicketType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event_tickets.EventTickets/patchTicketType',
            passkit_dot_io_dot_event__tickets_dot_ticket__type__pb2.TicketType.SerializeToString,
            passkit_dot_io_dot_event__tickets_dot_ticket__type__pb2.TicketType.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getTicketTypeById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event_tickets.EventTickets/getTicketTypeById',
            passkit_dot_io_dot_common_dot_common__objects__pb2.Id.SerializeToString,
            passkit_dot_io_dot_event__tickets_dot_ticket__type__pb2.TicketType.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getTicketTypeByUserDefinedId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event_tickets.EventTickets/getTicketTypeByUserDefinedId',
            passkit_dot_io_dot_event__tickets_dot_ticket__type__pb2.GetByUidRequest.SerializeToString,
            passkit_dot_io_dot_event__tickets_dot_ticket__type__pb2.TicketType.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def deleteTicketType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event_tickets.EventTickets/deleteTicketType',
            passkit_dot_io_dot_event__tickets_dot_ticket__type__pb2.TicketType.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def listTicketTypes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/event_tickets.EventTickets/listTicketTypes',
            passkit_dot_io_dot_event__tickets_dot_ticket__type__pb2.TicketTypeListRequest.SerializeToString,
            passkit_dot_io_dot_event__tickets_dot_ticket__type__pb2.TicketType.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def issueTicket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event_tickets.EventTickets/issueTicket',
            passkit_dot_io_dot_event__tickets_dot_ticket__pb2.IssueTicketRequest.SerializeToString,
            passkit_dot_io_dot_common_dot_common__objects__pb2.Id.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def issueTicketById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event_tickets.EventTickets/issueTicketById',
            passkit_dot_io_dot_event__tickets_dot_ticket__pb2.Ticket.SerializeToString,
            passkit_dot_io_dot_event__tickets_dot_ticket__pb2.IssueTicketResponseIds.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def updateTicket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event_tickets.EventTickets/updateTicket',
            passkit_dot_io_dot_event__tickets_dot_ticket__pb2.Ticket.SerializeToString,
            passkit_dot_io_dot_common_dot_common__objects__pb2.Id.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def patchPerson(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event_tickets.EventTickets/patchPerson',
            passkit_dot_io_dot_event__tickets_dot_ticket__pb2.EventTicketPerson.SerializeToString,
            passkit_dot_io_dot_common_dot_common__objects__pb2.Id.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def validateTicket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event_tickets.EventTickets/validateTicket',
            passkit_dot_io_dot_event__tickets_dot_ticket__pb2.ValidateTicketRequest.SerializeToString,
            passkit_dot_io_dot_event__tickets_dot_ticket__pb2.ValidateTicketResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def redeemTicket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event_tickets.EventTickets/redeemTicket',
            passkit_dot_io_dot_event__tickets_dot_ticket__pb2.RedeemTicketRequest.SerializeToString,
            passkit_dot_io_dot_common_dot_common__objects__pb2.Id.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def redeemTicketsByOrderNumber(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event_tickets.EventTickets/redeemTicketsByOrderNumber',
            passkit_dot_io_dot_event__tickets_dot_ticket__pb2.RedeemByOrderNumber.SerializeToString,
            passkit_dot_io_dot_common_dot_common__objects__pb2.Ids.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getTicketById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event_tickets.EventTickets/getTicketById',
            passkit_dot_io_dot_common_dot_common__objects__pb2.Id.SerializeToString,
            passkit_dot_io_dot_event__tickets_dot_ticket__pb2.Ticket.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getTicketByTicketNumber(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event_tickets.EventTickets/getTicketByTicketNumber',
            passkit_dot_io_dot_event__tickets_dot_ticket__pb2.TicketNumberRequest.SerializeToString,
            passkit_dot_io_dot_event__tickets_dot_ticket__pb2.Ticket.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getTicketsByOrderNumber(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event_tickets.EventTickets/getTicketsByOrderNumber',
            passkit_dot_io_dot_event__tickets_dot_ticket__pb2.OrderNumberRequest.SerializeToString,
            passkit_dot_io_dot_event__tickets_dot_ticket__pb2.Tickets.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getEventTicketPass(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event_tickets.EventTickets/getEventTicketPass',
            passkit_dot_io_dot_event__tickets_dot_ticket__pb2.EventTicketPassRequest.SerializeToString,
            passkit_dot_io_dot_common_dot_common__objects__pb2.PassBundles.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def deleteTicket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event_tickets.EventTickets/deleteTicket',
            passkit_dot_io_dot_event__tickets_dot_ticket__pb2.TicketId.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def bulkDeleteTickets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event_tickets.EventTickets/bulkDeleteTickets',
            passkit_dot_io_dot_common_dot_common__objects__pb2.BulkPassActionRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def deleteTicketsByOrderNumber(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event_tickets.EventTickets/deleteTicketsByOrderNumber',
            passkit_dot_io_dot_event__tickets_dot_ticket__pb2.OrderNumberRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def listTickets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/event_tickets.EventTickets/listTickets',
            passkit_dot_io_dot_event__tickets_dot_ticket__pb2.TicketListRequest.SerializeToString,
            passkit_dot_io_dot_event__tickets_dot_ticket__pb2.TicketLimitedFields.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def countTickets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/event_tickets.EventTickets/countTickets',
            passkit_dot_io_dot_event__tickets_dot_ticket__pb2.TicketListRequest.SerializeToString,
            passkit_dot_io_dot_common_dot_common__objects__pb2.Count.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
